/* tslint:disable */
import { TinyColor as Color } from '@ctrl/tinycolor'

import gray from 'gray-percentage'

interface ColorMap {
  [colorName: string]: string
}

interface GrayColorMap extends ColorMap {
  dark: string
  copy: string
  calm: string
}

interface Colors {
  bgDark: string
  defaultHover: string
  defaultLink: string
  gray: GrayColorMap
  primary: ColorMap
  secondary: ColorMap
  ui: ColorMap
}

const primaryColors = {
  // Light Primary shades --
  // autogenerated between #FFF and #FF3A5C.
  // light1: '#ffebee',
  // light2: '#ffd7de',
  // light3: '#ffc3ce',
  // light4: '#ffb0bd',
  // light5: '#ff9cad',
  // light6: '#ff889d',
  // light7: '#ff758c',
  // light8: '#ff617c',
  // light9: '#ff4d6c',
  // Main primary.
  main: '#ff3a5c',
}

const secondaryColors = {
  // Light Secondary shades (autogenerated).
  light0: '#fbfafc',
  // light1: '#efebf7',
  // light2: '#e0d7f0',
  // light3: '#d1c3e9',
  // light4: '#c2b0e2',
  light5: '#b39cdb',
  // light6: '#a388d3',
  light7: '#9475cc',
  // light8: '#8561c5',
  // light9: '#764dbe',
  // Main secondary color.
  main: '#673ab7',
  // Dark secondary shades (autogenerated).
  // dark9: '#5c34a4',
  // dark8: '#522e92',
  // dark7: '#482880',
  // dark6: '#3d226d',
  dark5: '#331d5b',
  // dark4: '#291749',
  // dark3: '#1e1136',
  // dark2: '#140b24',
  // dark1: '#0a0512',
}

const colors: Colors = Object.freeze({
  primary: primaryColors,
  secondary: secondaryColors,

  bgDark: 'rgb(55, 59, 70)',

  ui: {
    bright: '#ffc9d2',
    light: '#f5f3f7',
    whisper: '#fbfafc',
  },

  gray: {
    dark: gray(8, 270),
    copy: gray(20, 'slate'),
    // calm: gray(46, 'cool'),
    calm: gray(80, 'cool'),
  },

  defaultHover: new Color(secondaryColors.light7).setAlpha(0.8).toRgb(),

  defaultLink: new Color(primaryColors.main).setAlpha(0.8).toRgb(),
})

export default colors
