---
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8

    steps:
      - checkout

      - restore_cache:
          keys:
            - dependencies-{{ checksum "package.json" }}
            # Fallback to using the latest cache if no exact match is found.
            - dependencies-

      - run:
          name: Install dependencies.
          command: yarn install

      - save_cache:
          paths:
            - node_modules
          key: dependencies-{{ checksum "package.json" }}

      - run:
          name: Compile static site.
          command: yarn build

      - run:
          name: Compress and package static resources into a tarball.
          command: tar czf jessestuart_$CIRCLE_SHA1.tar.gz public/

      - store_artifacts:
          path: jessestuart_$CIRCLE_SHA1.tar.gz

  # ---------------------------------------------------------------------------

  push_image:
    name: Build and push Docker image to AWS ECR.
    environment:
      # yamllint disable-line
      - IMAGE_ID: "672278003389.dkr.ecr.us-east-1.amazonaws.com/jessestuart/jsgatsby"
    docker:
      - image: docker:17-git
    steps:
      - checkout

      - setup_remote_docker

      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip
            pip install awscli

      - run:
          name: Authenticate with AWS ECR.
          command: |
            eval $(aws ecr get-login --no-include-email --region us-east-1)

      - run:
          name: Build Docker image for static site.
          command: |
            docker build -t "${IMAGE_ID}" .

      - run:
          name: Push image to ECR.
          command: |
            docker tag    "${IMAGE_ID}" "${IMAGE_ID}:circle-${CIRCLE_BUILD_NUM}"
            docker push                 "${IMAGE_ID}:circle-${CIRCLE_BUILD_NUM}"
            if [ "${CIRCLE_BRANCH}" = 'master' ]; then
              docker tag  "${IMAGE_ID}" "${IMAGE_ID}:latest"
              docker push               "${IMAGE_ID}:latest"
            fi

  capture_screenshots:
    name: Capture screenshots using puppeteer.
    docker:
      - image: circleci/node:8

    steps:
      - checkout

      - restore_cache:
          keys:
            - dependencies-{{ checksum "package.json" }}
            - dependencies-

      - run:
          name: Workaround for GoogleChrome/puppeteer#290
          command: 'sh ./.circleci/setup_puppeteer.sh'

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: dependencies-{{ checksum "package.json" }}

      - run: yarn test


workflows:
  version: 2
  main:
    jobs:
      - build
      - push_image
      - capture_screenshots
